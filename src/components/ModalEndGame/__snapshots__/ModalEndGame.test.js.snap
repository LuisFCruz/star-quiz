// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ModalEndGame /> render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ModalEndGame
    classes={Object {}}
    finished={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(DialogTitle)>
          Game over!
        </WithStyles(DialogTitle)>,
        <WithStyles(DialogContent)>
          <WithStyles(Typography)>
             points
          </WithStyles(Typography)>
          <WithStyles(Typography)>
            Save your score!
          </WithStyles(Typography)>
          <WithStyles(FormControl)
            error={false}
          >
            <WithStyles(WithFormControlContext(InputLabel))>
              Name
            </WithStyles(WithFormControlContext(InputLabel))>
            <WithStyles(Input)
              onChange={[Function]}
            />
          </WithStyles(FormControl)>
          <WithStyles(FormControl)>
            <WithStyles(WithFormControlContext(InputLabel))>
              Email
            </WithStyles(WithFormControlContext(InputLabel))>
            <WithStyles(Input)
              onChange={[Function]}
            />
          </WithStyles(FormControl)>
        </WithStyles(DialogContent)>,
        <WithStyles(DialogActions)>
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
          >
            Cancel
          </WithStyles(Button)>
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
          >
            Save
          </WithStyles(Button)>
        </WithStyles(DialogActions)>,
      ],
      "onClose": [Function],
      "open": false,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Game over!",
        },
        "ref": null,
        "rendered": "Game over!",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Typography)>
               points
            </WithStyles(Typography)>,
            <WithStyles(Typography)>
              Save your score!
            </WithStyles(Typography)>,
            <WithStyles(FormControl)
              error={false}
            >
              <WithStyles(WithFormControlContext(InputLabel))>
                Name
              </WithStyles(WithFormControlContext(InputLabel))>
              <WithStyles(Input)
                onChange={[Function]}
              />
            </WithStyles(FormControl)>,
            <WithStyles(FormControl)>
              <WithStyles(WithFormControlContext(InputLabel))>
                Email
              </WithStyles(WithFormControlContext(InputLabel))>
              <WithStyles(Input)
                onChange={[Function]}
              />
            </WithStyles(FormControl)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                undefined,
                " points",
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              undefined,
              " points",
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Save your score!",
            },
            "ref": null,
            "rendered": "Save your score!",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(WithFormControlContext(InputLabel))>
                  Name
                </WithStyles(WithFormControlContext(InputLabel))>,
                <WithStyles(Input)
                  onChange={[Function]}
                />,
              ],
              "className": undefined,
              "error": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Name",
                },
                "ref": null,
                "rendered": "Name",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(WithFormControlContext(InputLabel))>
                  Email
                </WithStyles(WithFormControlContext(InputLabel))>,
                <WithStyles(Input)
                  onChange={[Function]}
                />,
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Email",
                },
                "ref": null,
                "rendered": "Email",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "onChange": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
            >
              Cancel
            </WithStyles(Button)>,
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
            >
              Save
            </WithStyles(Button)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Cancel",
              "color": "primary",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Cancel",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Save",
              "color": "primary",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Save",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(DialogTitle)>
            Game over!
          </WithStyles(DialogTitle)>,
          <WithStyles(DialogContent)>
            <WithStyles(Typography)>
               points
            </WithStyles(Typography)>
            <WithStyles(Typography)>
              Save your score!
            </WithStyles(Typography)>
            <WithStyles(FormControl)
              error={false}
            >
              <WithStyles(WithFormControlContext(InputLabel))>
                Name
              </WithStyles(WithFormControlContext(InputLabel))>
              <WithStyles(Input)
                onChange={[Function]}
              />
            </WithStyles(FormControl)>
            <WithStyles(FormControl)>
              <WithStyles(WithFormControlContext(InputLabel))>
                Email
              </WithStyles(WithFormControlContext(InputLabel))>
              <WithStyles(Input)
                onChange={[Function]}
              />
            </WithStyles(FormControl)>
          </WithStyles(DialogContent)>,
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
            >
              Cancel
            </WithStyles(Button)>
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
            >
              Save
            </WithStyles(Button)>
          </WithStyles(DialogActions)>,
        ],
        "onClose": [Function],
        "open": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Game over!",
          },
          "ref": null,
          "rendered": "Game over!",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)>
                 points
              </WithStyles(Typography)>,
              <WithStyles(Typography)>
                Save your score!
              </WithStyles(Typography)>,
              <WithStyles(FormControl)
                error={false}
              >
                <WithStyles(WithFormControlContext(InputLabel))>
                  Name
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  onChange={[Function]}
                />
              </WithStyles(FormControl)>,
              <WithStyles(FormControl)>
                <WithStyles(WithFormControlContext(InputLabel))>
                  Email
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  onChange={[Function]}
                />
              </WithStyles(FormControl)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  undefined,
                  " points",
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                undefined,
                " points",
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Save your score!",
              },
              "ref": null,
              "rendered": "Save your score!",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(WithFormControlContext(InputLabel))>
                    Name
                  </WithStyles(WithFormControlContext(InputLabel))>,
                  <WithStyles(Input)
                    onChange={[Function]}
                  />,
                ],
                "className": undefined,
                "error": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Name",
                  },
                  "ref": null,
                  "rendered": "Name",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "onChange": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(WithFormControlContext(InputLabel))>
                    Email
                  </WithStyles(WithFormControlContext(InputLabel))>,
                  <WithStyles(Input)
                    onChange={[Function]}
                  />,
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Email",
                  },
                  "ref": null,
                  "rendered": "Email",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "onChange": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Button)
                color="primary"
                onClick={[Function]}
              >
                Cancel
              </WithStyles(Button)>,
              <WithStyles(Button)
                color="primary"
                onClick={[Function]}
              >
                Save
              </WithStyles(Button)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Cancel",
                "color": "primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Cancel",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Save",
                "color": "primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Save",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
